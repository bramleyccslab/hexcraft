# Create action set
###################
f<-list()
f$AddUnit<-function(ts)
{
#Add unit in centre
# this_state[N+1,N+1] <- 1
# ts$active[ts$x==0, ts$y==0] <- 1
ts$active[31]<-1 #Amortised for speed!
ts
}
f$RemoveUnit<-function(ts)
{
#Add unit in center
# ts$active[ts$x==0, ts$y==0] <- 0
ts$active[31]<-0
ts
}
f$AddBar<-function(ts)
{
#Add horizontal bar
ts$active[c(30, 31, 32)] <- 1
#ts$x==-1 & ts$y==0
#ts$x==0 & ts$y==0
ts
}
f$AddCorner<-function(ts)
{
#Add horizontal bar
ts$active[c(24,31,32)] <- 1#ts$x==1 & ts$y==-1
ts
}
f$RotateClockwise<-function(ts)
{
os<-ts
ts$active<-0
ts$active[amort$rotations[[1]]$to]<-os$active[amort$rotations[[1]]$from]
ts
}
f$Flip<-function(ts, axis=1)
{
os<-ts
ts$active<-0
ts$active[amort$flips[[axis]]$to]<-os$active[amort$flips[[axis]]$from]
ts
}
f$Reflect<-function(ts, axis=1)
{
os<-ts
ts$active<-0
ts$active[amort$flips[[axis]]$to]<-os$active[amort$flips[[axis]]$from]
ts$active<-as.numeric(ts$active | os$active)
ts
}
# f$Invert<-function(ts, radius = 2)
# {
#   ts$active[abs(ts$q)<radius & abs(ts$r)<radius & abs(ts$s)<radius]<-1-ts$active[abs(ts$q)<radius & abs(ts$r)<radius & abs(ts$s)<radius]
#   ts
# }
f$ShiftNE<-function(ts, dir = 1)
{
os<-ts
ts$active<-0
ts$active[amort$vectors[[dir]]$to]<-os$active[amort$vectors[[dir]]$from]
ts
}
f$ShiftNW<-function(ts, dir = 3)
{
os<-ts
ts$active<-0
ts$active[amort$vectors[[dir]]$to]<-os$active[amort$vectors[[dir]]$from]
ts
}
f$ShiftW<-function(ts, dir = 5)
{
os<-ts
ts$active<-0
ts$active[amort$vectors[[dir]]$to]<-os$active[amort$vectors[[dir]]$from]
ts
}
apply_cache<-function(ts, cache){
for (c in 1: length(cache))
{
ts<-f[[cache[c]]](ts)
}
ts
}
save(file='./dat/hexsetup.rdata', f, empty_state, board_polygons, amort,
cube_to_oddr, oddr_to_cube, make_hex_coords, make_hex_lattice, apply_cache)
# f$ShiftE<-function(ts, dir = 2)
# {
#   os<-ts
#   ts$active<-0
#   ts$active[amort$vectors[[dir]]$to]<-os$active[amort$vectors[[dir]]$from]
#   ts
# }
# f$ShiftSE<-function(ts, dir = 4)
# {
#   os<-ts
#   ts$active<-0
#   ts$active[amort$vectors[[dir]]$to]<-os$active[amort$vectors[[dir]]$from]
#   ts
# }
# f$ShiftNW<-function(ts, dir = 6)
# {
#   os<-ts
#   ts$active<-0
#   ts$active[amort$vectors[[dir]]$to]<-os$active[amort$vectors[[dir]]$from]
#   ts
# }
# f$Lock<-function(ts)
# {
#   # Special function because it shifts the active state to the locked state for which we get the scored loss
#   # Should I change this since we want every trial to come with a loss even if not yet locked?
#   # I guess we could pull the scoring out and make the loss not dependent on things being locked
#   # or make it that locking gives points and clears the hexes, such that the loss of the active state is just about the un-solved hexes
#   ts$locked<-pmax(ts$locked, ts$active)
#   ts$active<-0
#   ts
# }
# UseCache<-function(n, this_state, this_real)
# {
#   #Read the cached pattern TODO KEEP THIS NOT IN THE STRING
#   cache_pattern <- library[n]#Array.from($('#cache' + n).text())
#   cat('before expanding:', cache_pattern)
#
#   #Get rid of any nesting before the display process begins
#
#   while (cachable_keycodes[1] %in% cache_pattern |
#          cachable_keycodes[2] %in% cache_pattern |
#          cachable_keycodes[3] %in% cache_pattern |
#          cachable_keycodes[4] %in% cache_pattern |
#          cachable_keycodes[5] %in% cache_pattern |
#          cachable_keycodes[6] %in% cache_pattern ) {
#
#     for (i in 1:length(cache_pattern))
#     {
#       for (j in 1:length(cachable_keycodes))
#       {
#         if (cache_pattern[i]==cachable_keycodes[j])
#         {
#           if (i==1)
#           {
#             cache_pattern<-c(library[[j]], cache_pattern[2:length(cache_pattern)])
#           } else if (i==length(cache_pattern))
#           {
#             cache_pattern<-c(cache_pattern[1:(i-1)], library[[j]])
#           } else {
#             cache_pattern<-c(cache_pattern[1:(i-1)], library[[j]], cache_pattern[(i+1):length(cache_pattern)])
#           }
#
#           #MAY NEED TO CHECK IF ITS FIRST OR LAST
#           # cache_pattern.splice(i, 1)
#           # insertArrayAt(cache_pattern, i, library[j])
#           break
#         }
#       }
#     }
#   }
#   #How long is the fully expanded string?
#     cpl = length(cache_pattern)
#
#   #Feed the string to the Action function with short timeouts so you can see it play out
#   cat('after expanding:', cache_pattern)
#
#
#   for (i in 1:length(cache_pattern))
#   {
#     Action(cache_pattern[i], this_state=this_state, real=this_real, midcache = T)
#   }
#   if (this_real)
#   {
#     Update()
#     actions[length(actions)+1]<-cachable_keycodes[n]
#     # UpdateStringVis()
#   }
# }
# generate_test_sets
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(gridExtra) #For plotting lots of things at once
# source('hex_setup.R')
load('./dat/hexsetup.rdata', verbose = T)
setwd("~/Documents/GitHub/hexcraft/R")
# generate_test_sets
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(gridExtra) #For plotting lots of things at once
# source('hex_setup.R')
load('./dat/hexsetup.rdata', verbose = T)
custom_cache = c("AddBar", "AddCorner", "RemoveUnit")  #triangle
#custom_cache = c("AddUnit", "ShiftSE", "AddUnit", "ShiftNE", "AddUnit")  #triangle
#custom_cache = c("AddCorner", "ShiftSE", "AddUnit") #hazard
#custom_cache = c("AddBar", "RotateClockwise", "AddBar")  #dabone
ccache_only = FALSE
ccache = TRUE
# ##################################################
# Generate a bunch of test sequences without caching
set.seed(27122000) #changed for random generation
depth <- 7
N <- if (ccache) 1 else 9
recursive_targets_d3 <- list()
recursive_targets_d3_solutions <- list()
for (cache in 1:N) {
recursive_targets_d3[[cache]] <- matrix(NA, nrow = 61, ncol = 10)
recursive_targets_d3_solutions[[cache]] <- list()
for (example in 1:10) {
state <- empty_state %>% select(-x_pos, -y_pos) %>% mutate(target = 0, active = 0)
d <- 1
a_states <- matrix(NA, nrow = nrow(state), ncol = depth)
actions <- list()
max_attempts = 50
attempts = 0
while (d < (depth + 1) && attempts < max_attempts) {
attempts = attempts + 1
use_cache =  ccache_only || runif(1) < 0.5
if (use_cache) {
tmp_state <- apply_cache(state, custom_cache)
action <- paste0("Cache")
cat('cache', cache, 'example', example, 'USING CUSTOM CACHE\n')
} else {
action <- names(f)[sample(length(f), 1)]
tmp_state <- f[[action]](state)
cat('cache', cache, 'example', example, 'primitive\n')
}
loop_check <- FALSE
if (d == 1 && all(tmp_state$active == 0)) {
loop_check <- TRUE
}
if (d > 1) {
for (lc in 1:(d - 1)) {
if (all(tmp_state$active == a_states[, lc])) {
loop_check <- TRUE
break
}
}
}
if (!loop_check) {
state <- tmp_state
a_states[, d] <- state$active
actions[[d]] <- action
d <- d + 1
attempts <- 0
}
}
recursive_targets_d3[[cache]][, example] <- state$active
recursive_targets_d3_solutions[[cache]][[example]] <- actions
}
}
# generate_test_sets
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(gridExtra) #For plotting lots of things at once
# source('hex_setup.R')
load('./dat/hexsetup.rdata', verbose = T)
custom_cache = c("AddBar", "AddCorner", "RemoveUnit")  #triangle
#custom_cache = c("AddUnit", "ShiftSE", "AddUnit", "ShiftNE", "AddUnit")  #triangle
#custom_cache = c("AddCorner", "ShiftSE", "AddUnit") #hazard
#custom_cache = c("AddBar", "RotateClockwise", "AddBar")  #dabone
ccache_only = FALSE
ccache = TRUE
# ##################################################
# Generate a bunch of test sequences without caching
set.seed(27122000) #changed for random generation
depth <- 7
N <- if (ccache) 1 else 9
recursive_targets_d3 <- list()
recursive_targets_d3_solutions <- list()
for (cache in 1:N) {
recursive_targets_d3[[cache]] <- matrix(NA, nrow = 61, ncol = 10)
recursive_targets_d3_solutions[[cache]] <- list()
for (example in 1:10) {
state <- empty_state %>% select(-x_pos, -y_pos) %>% mutate(target = 0, active = 0)
d <- 1
a_states <- matrix(NA, nrow = nrow(state), ncol = depth)
actions <- list()
max_attempts = 50
attempts = 0
while (d < (depth + 1) && attempts < max_attempts) {
attempts = attempts + 1
use_cache =  ccache_only || runif(1) < 0.5
if (use_cache) {
tmp_state <- apply_cache(state, custom_cache)
action <- paste0("Cache")
cat('cache', cache, 'example', example, 'USING CUSTOM CACHE\n')
} else {
action <- names(f)[sample(length(f), 1)]
tmp_state <- f[[action]](state)
cat('cache', cache, 'example', example, 'primitive\n')
}
loop_check <- FALSE
if (d == 1 && all(tmp_state$active == 0)) {
loop_check <- TRUE
}
if (d > 1) {
for (lc in 1:(d - 1)) {
if (all(tmp_state$active == a_states[, lc])) {
loop_check <- TRUE
break
}
}
}
if (!loop_check) {
state <- tmp_state
a_states[, d] <- state$active
actions[[d]] <- action
d <- d + 1
attempts <- 0
}
}
recursive_targets_d3[[cache]][, example] <- state$active
recursive_targets_d3_solutions[[cache]][[example]] <- actions
}
}
p_save
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(gridExtra) #For plotting lots of things at once
# source('hex_setup.R')
load('./dat/hexsetup.rdata', verbose = T)
##########
#START
##########
set.seed(1988)
#Create an initially empty 'state', i.e. board description
state<-empty_state %>% select(-x_pos, -y_pos) %>% mutate(target = 0, active=0)
#A: creating a testing sort of thing to try various actions out a-la interactively
# Apply a random sequence of actions to this state
depth<-10
# Keep track of what you do
#a_states<-matrix(NA, nrow=nrow(state), ncol=depth)
#actions<-rep(NA, length = depth)
# for (d in 1:depth)
# {
#   if (d==1)
#   {
#     action<-sample(c(1,3,4), 1)
#   } else {
#     action<-sample(length(f), 1)
#   }
#
#   state<-f[[action]](state)
#
#   a_states[,d]<-state$active
#   actions[d]<-names(f)[action]
# }
#put action numbers here
temp_actions = c(4, 5)
a_states<-matrix(NA, nrow=nrow(state), ncol=length(temp_actions))
actions<-rep(NA, length = length(temp_actions))
for (a in 1:length(temp_actions)){
action = temp_actions[a]
state<-f[[action]](state)
a_states[,a]<-state$active
actions[a]<-names(f)[action]
a
action
}
#Check that some stuff got added to the board (columns should sum to more than zero)
colSums(a_states)
# See what actions were performed
actions
# Paste the final state to the board-map and plot it out to look at what happened
board_polygons$state<-factor(rep(a_states[,length(temp_actions)], each = 6))
# ggplot(board_polygons, aes(x = x_pos, y = y_pos)) +
#   geom_polygon(aes(group = id), fill = "white", colour = "black") +
#   geom_text(data = empty_state, aes(x = x_pos, y = y_pos, label = id), size = 3) +
#   theme_void() +
#   coord_equal()
ggplot(board_polygons, aes(x_pos, y_pos)) +
geom_polygon(aes(group = id, fill=state), colour = 'black') +
geom_text(data = empty_state, aes(x = x_pos, y = y_pos, label = id), size = 3) +
scale_y_reverse() +
scale_fill_manual(values = c('white','yellow'))
##################
# Greedy solver
##################
# Now let's automate a search for the solution based on "breadth first" set of greedy steps
target<-state$active
state<-empty_state %>% select(-x_pos, -y_pos) %>% mutate(target = 0, active=0, locked=0)
state$target<-target
full_points<-sum(state$target)
board_polygons$target<-factor(rep(state$target, each = 6))
ggplot(board_polygons, aes(x_pos, y_pos)) +
geom_polygon(aes(group = id, fill=target), colour = 'black') +
scale_fill_manual(values = c('white','lightyellow'))
timeout<-10#10 #Try the whole search process 10 times
n_samples<-120#10 #On each step generate 10 candidate sequences of length 1:max_depth
max_depth<-3#10 #Progressively increase the number of steps generated (so you have a short-path-first search)
a_states<-list()#vector(mode = "list", length = depth)
actions<-list()
scores<-rep(NA, length = timeout)
for (t in 1:timeout)
{
# Track how well you are doing
current_score<-sum(state$active==1 & state$target==1) - sum(state$active==1 & state$target==0) - length(unlist(actions))*0.1
ps<-list()
score<-rep(NA, n_samples)
progress<-F #Breaks the search loop when you find something that improves on what you have (greedyness)
seq_length<-1 #Reset the sequence length each time
# This is a greedy search
#It starts with 1-step options and increases until something improves the fitness
while (T)
{
# Create a set of n_samples potential next action(sequences)
prospective_actions<-list() #Keep they hypothetical play-forwards in this list
for (samp in 1:n_samples)
{
#Each step is a function from the library [TO ADD, ALLOW CACHING]
# prospective_actions[[samp]]<-sample(length(f), seq_length, replace = T)
# prospective_actions[[samp]]<-rep(NA, seq_length)
for (step in 1:seq_length) #OR samp:seq_length if we wanna reuse the failed trajectories from the previous depth?
{
if (step==1)
{
prospective_actions[[samp]]<-c(sample(length(f), 1, replace = T))
# Apply the first action in the sequence
ps[[samp]]<-f[[prospective_actions[[samp]][step]]](state)
} else {
prospective_actions[[samp]][step]<-sample(length(f), 1, replace = T)
# Apply subsequent actions in the sequence
ps[[samp]]<-f[[prospective_actions[[samp]][step]]](ps[[samp]])
}
#THERE'S AN OPPORTUNITY HERE TO CHECK THE SCORE ALONG THE PATH AND TAKE BEST/SHORTEST, SHOULD ADD FOR PERFORMANCE LATER?
}
# How many points would I have if I stopped there?
score[samp]<-sum(ps[[samp]]$active==1 & ps[[samp]]$target==1) - sum(ps[[samp]]$active==1 & ps[[samp]]$target==0) - length(unlist(actions))*0.1 - seq_length*0.1
}
greedy_choice_ix<-which(score==max(score))
cat('t',t, 'seq_length', seq_length, 'max score', max(score), 'current score', current_score, '\n')
# sample from the best options if there are more than 1
if (length(greedy_choice_ix)>1)
{
greedy_choice_ix<-sample(greedy_choice_ix, 1)
}
# If this gets me anywhere, then do it
if (max(score)>current_score)
{
state<-ps[[greedy_choice_ix]]
a_states[[length(a_states)+1]]<-state$active
actions[[length(actions)+1]]<-names(f)[prospective_actions[[greedy_choice_ix]]]
scores[t]<-score[greedy_choice_ix]
break
} else if (seq_length>max_depth) {
#If i have timed out and failed in this loop-through then reset the search to greedy again
# a_states[[length(a_states)+1]]<-state$active
# actions[[length(actions)+1]]<-''
scores[t]<-score[greedy_choice_ix]
cat('search failed')
break
} else {
#Otherwise increase depth by 1 and keep trying
seq_length<-seq_length+1
}
}# Progress
if (scores[t]==full_points)
{
print('done!')
break
}
}
# state<-f$Lock(state)
cat('Got:', sum(state$active==1 & state$target==1), ' of ', sum(state$target),
'with ', sum(state$active==1 & state$target==0), 'mistakes, with ', length(unlist(actions)),
'actions, for a score of', sum(state$active==1 & state$target==1) - sum(state$active==1 & state$target==0) - length(unlist(actions))*0.1)
state$combination<-0
state$combination[state$active==0 & target==1]<-1
state$combination[state$active==1 & target==0]<-2
state$combination[state$active==1 & target==1]<-3
board_polygons$combination<-factor(rep(state$combination, each = 6), levels = 0:3, labels = c('empty','missed','wrong','correct'))
board_polygons$state<-factor(rep(state$active, each = 6), levels = 0:1, labels = c('inactive','active'))
# Fix colour scheme
ggplot(board_polygons, aes(x_pos, y_pos)) +
geom_polygon(aes(group = id, fill=combination, colour=state)) +
scale_colour_manual(values = c('gray','black'), drop = F) +
scale_fill_manual(values = c('white','yellow','pink','lightgreen'), drop = F)
f
names(f)
log(10) * .5 + log(10) * (1 - .5)
log(15) * .5 + log(5) * (1 - .5)
log(15) * .6 + log(5) * (1 - .4)
log2(10) * .5 + log2(10) * (1 - .5)
log2(15) * .5 + log2(5) * (1 - .5)
log2(15) * .6 + log2(5) * (1 - .4)
log2(15) * .6 + log2(5) * (1 - .6)
log2(15) * .55 + log2(5) * (1 - .55)
log2(15) * .5 + log2(5) * (1 - .5)
log2(.5) * 15 + log2(.5) * (1 - .5)
log2(.5) * 15 + log2(.5) * 5
log2(.5) * 10 + log2(.5) * 10
log2(.6) * 15 + log2(.4) * 5
log2(.5) * 15 + log2(.5) * 5
log2(.6) * 15 + log2(.4) * 5
# generate_test_sets
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(gridExtra) #For plotting lots of things at once
# source('hex_setup.R')
load('./dat/hexsetup.rdata', verbose = T)
setwd("~/Documents/GitHub/hexcraft/R")
# generate_test_sets
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(gridExtra) #For plotting lots of things at once
# source('hex_setup.R')
load('./dat/hexsetup.rdata', verbose = T)
